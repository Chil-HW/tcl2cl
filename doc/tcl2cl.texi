\input texinfo
@c -*- texinfo -*-

@c %**start of header
@setfilename tcl2cl.info
@documentencoding UTF-8
@settitle Tcl2CL Reference Manual
@c %**end of header

@include version.texi

@copying
Copyright @copyright{} 2023 Raven Hallsby@*

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts. A
copy of the license is included in the section entitled ``GNU Free
Documentation License''.
@end copying

@titlepage
@title Tcl2CL Reference Manual
@subtitle Tcl/Tk to Common Lisp Transpiler
@author Raven Hallsby

@insertcopying
@end titlepage

@contents

@c *********************************************************************
@node Top
@top Tcl2CL

This document describes Tcl2CL version @value{VERSION}, a transpiler for
Tcl/Tk.  This transpiler will read a Tcl/Tk script and output an
equivalent Common Lisp script.

@menu
* Introduction::                What is Tcl2CL?
* Resources::                   Resources Tcl2CL used for inspiration.
* Contributing::                You can help too!
@end menu

@node Introduction
@chapter Introduction

@cindex purpose
Tcl/Tk is intended to integrate with the Chil project to provide a
Tcl/Tk-compatible interface to Chil.

Tcl2CL will implement a variant of Tcl, potentially with all of Tcl's
features and quirks, such that almost (hopefully all) Tcl programs may
run without changes.  Ideally, this version of Tcl2CL will read in a Tcl
file, parse it, and output an equivalent ANSI Common Lisp program.

When a procedure that cannot be resolved is encountered, the procedure
is output literally, and the user is responsible for correct handling.

@node Parsing
@chapter Parsing
@cindex parsing
Tcl does not have an official (E)BNF grammar that describes it.  The
closest single official item that comes close to describing the syntax
and semantics of Tcl is
@url{https://www.tcl.tk/man/tcl8.6.13/TclCmd/Tcl.htm,TCL's @command{man}
page}.

@quotation NOTE
Tcl's @command{man} page is in section @code{n}.  So @command{man -s n
tcl} should find it for you.

@code{man tclsh (1)}
@code{man tcl (n)}
@end quotation

A @emph{subset} of Tcl's man page is reproduced here.

@enumerate
@item
@b{Commands.}
Any Tcl script is a string that contains one or more commands.
Semicolons and newlines separate commands.  Closing brackets are command
terminators during command substition, unless quoted.

@item
@b{Evaluation.}
Tcl breaks the command into words and performs substitutions.  The first
word is taken to be a command procedure, which carries out the command.
Once all substitions are complete, the substituted words of the command
are passed to the command procedure.  The command procedure interprets
these words to achieve its goal.

@item
@b{Words.}
Words are an arbitrary-length string of characters, separated by any
amount of whitespace, except for newlines.  Newlines are command
separators.

@item
@b{Double quotes.}
If the first character of a word is a double-quote @code{"}, the word
will be terminated by the @emph{next} unescaped double-quote character.
If any special characters (semicolors, closing brackets, or whitespace
characters (including newlines)) appear inside the quotes, they are
treated as normal characters and included in the word.  Command,
variable, and backslash substitution are performed on characters inside
the quotes.  At the end, the double-quotes are @emph{not} retained as
part of the word!

@quotation NOTE
Double-quotes in Tcl behave quite similarly to double-quotes in Bash!
@end quotation

@item
@b{Argument expansion.}

@item
@b{Braces.}

@quotation NOTE
Braces in Tcl behave quite similarly to single-quotes in Bash!
@end quotation

@item
@b{Command substitution.}

@item
@b{Variable substition.}

@item
@b{Backslash substition.}

@item
@b{Comments.}

@item
@b{Order of Substition.}

@item
@b{Substition and word boundaries.}

@end enumerate


Further, the community-written @url{https://en.wikipedia.org/wiki/Extended_Backus%E2%80%93Naur_form,EBNF} grammar from the @url{https://wiki.tcl-lang.org/page/BNF+for+Tcl,Tcl WIKI} is completely reproduced below.

The syntax below is mostly EBNF, except that @samp{[]}, @samp{\lbrace \rbrace}, @samp{?}, @samp{*}, and @samp{+} have been borrowed from regular expressions and @samp{,} is optional.
In addition, @samp{-} may be used to remove characters from a non-terminal composed only of terminals (set difference).
Note that the trailing @samp{;} in each of the productions terminates the production and is @emph{not} part of the Tcl code.
@verbatim
script = whitespace* ( command ( terminator script )? | comment ( '\n' script )? )? ;

command = word ( whitespace+ word )* whitespace* ;
commment = '#' ( '\\' character | ( character - '\n' ) )* ;

word = quote | expansion | brace | ( subcommand | variable | escape-sequence | ( character - space - '\\' ) )+ ;

quote     = '"' ( bracket | variable | continuation | escape-sequence | ( character - '"' ) )* '"' ;
expansion = '{*}' word ;
brace     = '{' ( brace | continuation | '\\' ( character - '\n' ) | ( character - '}' ) )* '}' ;

bracket         = '[' script-bracket ']' ;
script-bracket  = whitespace* ( command-bracket ( terminator script-bracket )? | comment ( '\n' script-bracket )? )? ;
command-bracket = word-bracket ( whitespace+ word-bracket )* whitespace* ;
word-bracket    = quote | expansion | brace | ( bracket | variable | escape-sequence | ( character - space - '\\' - ']' ) )+ ;

variable       = '$' ( name index? | variable-brace ) ;
name           = ( [0-9A-Z_a-z] | ':' ':'+ )+ ;
index          = '(' ( subcommand | variable | continuation | escape-sequence | ( character - ')' ) )* ')' ;
variable-brace = '{' ( name-brace index-brace | ( character - '}' )* ) '}' ;
name-brace     = ( character - '(' - '}' )* ;
index-brace    = '(' ( character - '}' )* ')' ;

escape-sequence = '\\' ( octal{1,3} | 'x' hex+ | 'u' hex{1,4} | 'U' hex{1,8} | ( character - '\n' ) ) ;

whitespace   = space | continuation ;
continuation = '\\\n' space* ;

terminator = '\n' | ';' ;
space      = ' ' | '\f' | '\r' | '\t' | '\v' ;
octal      = [0-7] ;
hex        = [0-9A-Fa-f] ;
character  = [\U0000 - \U10FFF] ;

# Taken from errata
variable-brace       = '{' array-brace | name-brace '}' ;
array-brace          = array-name-brace? index-brace? ;
array-name-brace     = ( character - '(' - '}' )+
index-brace          = '(' (character - '}')* ')' ;
name-brace           = ( character - '}' )* ;
@end verbatim

@node Resources
@chapter Resources

The @uref{https://www.tcl.tk, Tcl/Tk website} is @emph{the} location to
get information about the language.  In particular, the
@uref{https://www.tcl.tk/man/ Tcl/Tk manual pages} contain the
specifications for various revisions of the language.

@node Contributing
@chapter Contributing
@cindex documentation

Tcl2CL is documented using the Texinfo system.

@menu
* Style Guidelines::            Making all code look the same.
* Submitting Patches::          Sharing your work & improvements.
* Writing Documentation::       Improving & Writing documentation.
@end menu

@node Style Guidelines
@section Style Guidelines
This project uses
@uref{https://google.github.io/styleguide/lispguide.xml, Google's Common
Lisp style guide} as its guideline.  This document is freely available
online and contains, what I believe, are a good set of default style
points. Please read this document before submitting your changes to
ensure all of your modifications meet this style guide.  If your changes
have a good reason not to follow these guidelines, make sure you
document @emph{why} with appropriate comments.

@node Submitting Patches
@section Submitting Patches
When writing documentation, please use gender-neutral wording when
referring to people, such as
@uref{https://en.wikipedia.org/wiki/Singular_they, singular
``they''@comma{} ``their''@comma{} ``them''}, and so forth.

@quotation Heads Up
Please be sure to test your code with multiple Common Lisp
implementations before submitting your changes!  Tcl2CL is written using
ANSI-compliant Common Lisp, so any conforming implementation should
work.  Tcl2CL is currently tested with @uref{https://www.sbcl.org/, SBCL}
and @uref{https://ccl.clozure.com/, CCL}.
@end quotation

@node Writing Documentation
@section Writing Documentation

To render documentation, you must first make sure that you ran both
@command{./bootstrap} and @command{./configure} in your source tree.
After that you can run one of the following commands:

@itemize
@item @samp{make info} to compile the Info manual.
      You can check it with @command{info doc/tcl2cl.info}.
@item @samp{make doc/tcl2cl.info} to compile the Info manual.
      You can check it with @command{info doc/tcl2cl.info}.
@item @samp{make html} to compile the HTML version.
      You can point your browser to the relevant file in the
      @file{doc/tcl2cl.html} directory.
@item @samp{make doc/tcl2cl.html} to compile the HTML version.
      You can point your browser to the relevant file in the
      @file{doc/tcl2cl.html} directory.
@end itemize

@bye

@c Local Variables:
@c ispell-local-dictionary: "american";
@c End:
